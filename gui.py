
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import asyncio
import os
import requests
import datetime
import tkinter
import tkinter as tk
from time import *
from tkinter import *
from tkinter import ttk, Tk, Canvas, Entry, Text, Button, PhotoImage, Frame
from phue import Bridge
from meross_iot.http_api import MerossHttpClient
from meross_iot.manager import MerossManager
from pathlib import Path
from pyowm.owm import OWM
from tkinter import ttk
from PIL import Image, ImageTk
from PIL import Image
from io import BytesIO
import netatmo
import json
print("hi")
################ NETATMO ################
netatmo.fetch()
hc = netatmo.HomeCoach( {
        'client_id': '',
        'client_secret': '',
        'username': '',
        'password': '',
        'device': '' } )

def get_hc_data(scope):
    data = hc.get_data()
    print(data)
    return data['devices'][0]['dashboard_data'][str(scope)]
    
label_temperature = get_hc_data("Temperature")
label_humidity = get_hc_data("Humidity")
label_pressure = get_hc_data("Pressure")
label_noise = get_hc_data("Noise")
label_co2 = get_hc_data("CO2")
label_health_idx = get_hc_data("health_idx")
        
def refresh_netatmo(arg,canvas,lights_canvas, canvas_temperature, canvas_co2, canvas_noise, canvas_healthidx, canvas_pressure, canvas_humidity,
                    lights_canvas_co2, lights_canvas_temperature, lights_canvas_noise, lights_canvas_healthidx,
                    lights_canvas_pressure, lights_canvas_humidity):
    data = hc.get_data()
    canvas.itemconfig(canvas_temperature, text=data['devices'][0]['dashboard_data']["Temperature"])
    canvas.itemconfig(canvas_co2, text=data['devices'][0]['dashboard_data']["CO2"])
    canvas.itemconfig(canvas_noise, text=data['devices'][0]['dashboard_data']["Noise"])
    canvas.itemconfig(canvas_healthidx, text=data['devices'][0]['dashboard_data']["health_idx"])
    canvas.itemconfig(canvas_pressure, text=data['devices'][0]['dashboard_data']["Pressure"])
    canvas.itemconfig(canvas_humidity, text=data['devices'][0]['dashboard_data']["Humidity"])
    
    lights_canvas.itemconfig(lights_canvas_temperature, text=data['devices'][0]['dashboard_data']["Temperature"])
    lights_canvas.itemconfig(lights_canvas_co2, text=data['devices'][0]['dashboard_data']["CO2"])
    lights_canvas.itemconfig(lights_canvas_noise, text=data['devices'][0]['dashboard_data']["Noise"])
    lights_canvas.itemconfig(lights_canvas_healthidx, text=data['devices'][0]['dashboard_data']["health_idx"])
    lights_canvas.itemconfig(lights_canvas_pressure, text=data['devices'][0]['dashboard_data']["Pressure"])
    lights_canvas.itemconfig(lights_canvas_humidity, text=data['devices'][0]['dashboard_data']["Humidity"])
    
    arg.after(60000, lambda: refresh_netatmo(arg,canvas,lights_canvas, canvas_temperature, canvas_co2, canvas_noise, canvas_healthidx, canvas_pressure, canvas_humidity,
                    canvas_pressure, lights_canvas_co2, lights_canvas_temperature, lights_canvas_noise, lights_canvas_healthidx,
                    lights_canvas_pressure, lights_canvas_humidity))

################ END NETATMO ################
    
################ CONFIG HUE, OWM ################
b = Bridge('')
EMAIL = os.environ.get('') or ""
PASSWORD = os.environ.get('') or ""
owm = OWM('')
mgr = owm.weather_manager()
################ END CONFIG HUE, OWM ################

################ SET MAP LAYERS ################
def set_layer(canvas,layertype,top_left,top_center,top_right,bottom_left,bottom_center,bottom_right):
    global layer_tl, layer_tc, layer_tr, layer_bl, layer_bc, layer_br
    urltl = "https://tile.openweathermap.org/map/"+layertype + "/8/127/88.png?appid=e0aec5888752c00c143fccb409bce11f"
    responsetl = requests.get(urltl)
    layer_tl = ImageTk.PhotoImage(Image.open(BytesIO(responsetl.content)))
    canvas.itemconfig(top_left,image=layer_tl)
    urltc = "https://tile.openweathermap.org/map/"+layertype + "/8/128/88.png?appid=e0aec5888752c00c143fccb409bce11f"
    responsetc = requests.get(urltc)
    layer_tc = ImageTk.PhotoImage(Image.open(BytesIO(responsetc.content)))
    canvas.itemconfig(top_center,image=layer_tc)
    urltr = "https://tile.openweathermap.org/map/"+layertype + "/8/129/88.png?appid=e0aec5888752c00c143fccb409bce11f"
    responsetr = requests.get(urltr)
    layer_tr = ImageTk.PhotoImage(Image.open(BytesIO(responsetr.content)))
    canvas.itemconfig(top_right,image=layer_tr)
    urlbl = "https://tile.openweathermap.org/map/"+layertype + "/8/127/89.png?appid=e0aec5888752c00c143fccb409bce11f"
    responsebl = requests.get(urlbl)
    layer_bl = ImageTk.PhotoImage(Image.open(BytesIO(responsebl.content)))
    canvas.itemconfig(bottom_left,image=layer_bl)
    urlbc= "https://tile.openweathermap.org/map/"+layertype + "/8/128/89.png?appid=e0aec5888752c00c143fccb409bce11f"
    responsebc = requests.get(urlbc)
    layer_bc = ImageTk.PhotoImage(Image.open(BytesIO(responsebc.content)))
    canvas.itemconfig(bottom_center,image=layer_bc)
    urlbr = "https://tile.openweathermap.org/map/"+layertype + "/8/129/89.png?appid=e0aec5888752c00c143fccb409bce11f"
    responsebr = requests.get(urlbr)
    layer_br = ImageTk.PhotoImage(Image.open(BytesIO(responsebr.content)))
    canvas.itemconfig(bottom_right,image=layer_br)
################ END SET MAP LAYERS ################
    
    
################ MEROSS ################
def update_meross(arg,btn):
    if asyncio.run(get_meross()):
        btn.configure(bg="#FFFF00")
    else:
        btn.configure(bg="#808080")
    arg.after(600000, lambda: update_meross(arg,btn))
async def get_meross():
    http_api_client = await MerossHttpClient.async_from_user_password(email=EMAIL, password=PASSWORD)
    manager = MerossManager(http_client=http_api_client)
    await manager.async_init()
    await manager.async_device_discovery()
    plugs = manager.find_devices(device_type="mss110rtl")
    c = False
    if len(plugs) < 1:
        print("No MSS310 plugs found...")
    else:
        dev = plugs[0]
        await dev.async_update()
        c = dev.is_on()

    # Close the manager and logout from http_api
    manager.close()
    await http_api_client.async_logout()
    return c


async def tglmrs(btn):
    http_api_client = await MerossHttpClient.async_from_user_password(email=EMAIL, password=PASSWORD)
    manager = MerossManager(http_client=http_api_client)
    await manager.async_init()
    await manager.async_device_discovery()
    plugs = manager.find_devices(device_type="mss110rtl")

    if len(plugs) < 1:
        print("No MSS310 plugs found...")
    else:
        dev = plugs[0]
        await dev.async_update()
        if dev.is_on():
            await dev.async_turn_off(channel=0)
            btn.configure(bg="#808080")
        else:
            await dev.async_turn_on(channel=0)
            btn.configure(bg="#FFFF00")

    # Close the manager and logout from http_api
    manager.close()
    await http_api_client.async_logout()

def toggle_meross(btn):
    if __name__ == '__main__':
    # Windows and python 3.8 requires to set up a specific event_loop_policy.
    #  On Linux and MacOSX this is not necessary.
        if os.name == 'nt':
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        else:
            
            asyncio.set_event_loop_policy(asyncio.DefaultEventLoopPolicy())
        loop = asyncio.get_event_loop()
        loop.run_until_complete(tglmrs(btn))
        loop.stop()


b.connect()
print(b.get_api())
def switch(btn,lamp):
    if b.get_light(lamp, 'on'):
        b.set_light(lamp,'on', False)
        btn.configure(bg="#808080")
    else:
        b.set_light(lamp,'on', True)
        btn.configure(bg="#FFFF00")
################ END MEROSS ################
        
################ HUE ################
def update_light_hue(arg,lights_canvas,lights_button_7,light_button_8, lights_button_9, lights_button_10):
    b.get_api()
    if b.get_light('Hue ambiance pendant 1', 'on'):
        lights_button_7.configure(bg="#FFFF00")
    else:
        lights_button_7.configure(bg="#808080")
    if b.get_light('Hue Fair Pendant 1', 'on'):
        lights_button_8.configure(bg="#FFFF00")
    else:
        lights_button_8.configure(bg="#808080")
    if b.get_light("Hue color lamp 1","on"):
        lights_button_9.configure(bg="#FFFF00")
    else:
        lights_button_9.configure(bg="#808080")
    if b.get_light("Hue color lamp 2","on"):
        lights_button_10.configure(bg="#FFFF00")
    else:
        lights_button_10.configure(bg="#808080")
        
    arg.after(3000, lambda:update_light_hue(arg,lights_canvas,lights_button_7,lights_button_8, lights_button_9, lights_button_10))
################ END HUE ################
    
#outp = r"C:\Users\Pierre\Desktop\build\assets\frame0"
outp = r"C:\Users\alpha\Desktop\Tkinter-Designer-master\build\assets\frame0"
#outp = r"/home/pi/build/assets/frame0"
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(outp)

r = (requests.get('https://api.openweathermap.org/data/2.5/weather?lat=47.996&lon=0.203&appid=e0aec5888752c00c143fccb409bce11f')).json()
re = (requests.get('https://api.openweathermap.org/data/2.5/forecast?lat=47.996&lon=0.203&appid=e0aec5888752c00c143fccb409bce11f')).json()
one_call = mgr.one_call(lat=47.996, lon=0.203)


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
def update_time(arg, canvas, var):
    x = datetime.datetime.now()
    show = x.strftime("%A") + " " + x.strftime("%d") + " " + x.strftime("%B") + " " + x.strftime("%H") + ":" + x.strftime("%M")+ ":" + x.strftime("%S")
    canvas.itemconfig(var, text=show)
    arg.after(500, lambda: update_time(arg, canvas, var))
def update_date(arg,canvas,var1,var2,var3,var4,var5):
    now = datetime.date.today()
    canvas.itemconfig(var1,text = (now + datetime.timedelta(days=3)).strftime("%d") + " " + (now + datetime.timedelta(days=3)).strftime("%B"))
    canvas.itemconfig(var2,text = (now + datetime.timedelta(days=4)).strftime("%d") + " " + (now + datetime.timedelta(days=4)).strftime("%B"))
    canvas.itemconfig(var3,text = (now + datetime.timedelta(days=5)).strftime("%d") + " " + (now + datetime.timedelta(days=5)).strftime("%B"))
    canvas.itemconfig(var4,text = (now + datetime.timedelta(days=6)).strftime("%d") + " " + (now + datetime.timedelta(days=6)).strftime("%B"))
    canvas.itemconfig(var5,text = (now + datetime.timedelta(days=7)).strftime("%d") + " " + (now + datetime.timedelta(days=7)).strftime("%B"))
    arg.after(10000, lambda: update_date(arg,canvas,var1,var2,var3,var4,var5))


def update_weather_now(arg, canvas, image_now, temp_now, wind_now):
    global image, image_mtn, image_image_today
    r = (requests.get('https://api.openweathermap.org/data/2.5/weather?lat=47.996&lon=0.203&appid=e0aec5888752c00c143fccb409bce11f')).json()
    id_icon = r['weather'][0]['icon']
    temp = r['main']['temp']
    wind = int(r['wind']['speed'])*3.6
    
    image_mtn = PhotoImage(file=relative_to_assets(id_icon + ".png"))
    canvas.itemconfig(temp_now, text=str(round(temp-273.15)))
    canvas.itemconfig(wind_now, text=str(wind))
    canvas.itemconfig(image_now, image=image_mtn)
    arg.after(60000, lambda: update_weather_now(arg,canvas,image_now, temp_now,wind_now))

def update_weather_up(arg,canvas,first_img,second_img, third_img,first,second,third,firsttemp,secondtemp,thirdtemp):
    re = (requests.get('https://api.openweathermap.org/data/2.5/forecast?lat=47.996&lon=0.203&appid=e0aec5888752c00c143fccb409bce11f')).json()
    fimg = (Image.open('assets/frame0/' + re["list"][0]["weather"][0]["icon"]+'.png')).resize((85,85))
    f_img = ImageTk.PhotoImage(fimg)
    simg = (Image.open('assets/frame0/' + re["list"][1]["weather"][0]["icon"]+'.png')).resize((85,85))
    s_img = ImageTk.PhotoImage(simg)
    timg = (Image.open('assets/frame0/' + re["list"][2]["weather"][0]["icon"]+'.png')).resize((85,85))
    t_img = ImageTk.PhotoImage(timg)
    canvas.itemconfig(first, text=datetime.datetime.fromtimestamp(int(re["list"][0]["dt"])).strftime('%H:%M'))
    canvas.itemconfig(second, text=datetime.datetime.fromtimestamp(int(re["list"][1]["dt"])).strftime('%H:%M'))
    canvas.itemconfig(third, text=datetime.datetime.fromtimestamp(int(re["list"][2]["dt"])).strftime('%H:%M'))
    canvas.itemconfig(firsttemp, text=str(round(re["list"][0]["main"]["temp"]-273.15)))
    canvas.itemconfig(secondtemp, text=str(round(re["list"][1]["main"]["temp"]-273.15)))
    canvas.itemconfig(thirdtemp, text=str(round(re["list"][2]["main"]["temp"]-273.15)))
    arg.after(60000,lambda: update_weather_up(arg,canvas,first_img,second_img, third_img,first,second,third,firsttemp,secondtemp,thirdtemp))

def update_forecast(arg, canvas,min_bas_now, max_bas_now, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, imgzero, imgone, imgtwo, imgthree, imgfour, imgfive, imgsix):
    global img1, img2, img3, img4, img5, img6, img7
    one_call = mgr.one_call(lat=47.996, lon=0.203)
    img1 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[0].weather_icon_name + ".png")).resize((75,75)))
    img2 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[1].weather_icon_name + ".png")).resize((75,75)))
    img3 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[2].weather_icon_name + ".png")).resize((75,75)))
    img4 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[3].weather_icon_name + ".png")).resize((75,75)))
    img5 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[4].weather_icon_name + ".png")).resize((75,75)))
    img6 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[5].weather_icon_name + ".png")).resize((75,75)))
    img7 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[6].weather_icon_name + ".png")).resize((75,75)))
    
    canvas.itemconfig(imgzero, image=img1)
    canvas.itemconfig(imgone, image=img2)
    canvas.itemconfig(imgtwo, image=img3)
    canvas.itemconfig(imgthree, image=img4)
    canvas.itemconfig(imgfour, image=img5)
    canvas.itemconfig(imgfive, image=img6)
    canvas.itemconfig(imgsix, image=img7)
    
    canvas.itemconfig(min_bas_now, text=str(round(one_call.forecast_daily[0].temperature().get("min")-273.15)))
    canvas.itemconfig(min1, text=str(round(one_call.forecast_daily[1].temperature().get("min")-273.15)))
    canvas.itemconfig(min2, text=str(round(one_call.forecast_daily[2].temperature().get("min")-273.15)))
    canvas.itemconfig(min3, text=str(round(one_call.forecast_daily[3].temperature().get("min")-273.15)))
    canvas.itemconfig(min4, text=str(round(one_call.forecast_daily[4].temperature().get("min")-273.15)))
    canvas.itemconfig(min5, text=str(round(one_call.forecast_daily[5].temperature().get("min")-273.15)))
    canvas.itemconfig(min6, text=str(round(one_call.forecast_daily[6].temperature().get("min")-273.15)))
    
    canvas.itemconfig(max_bas_now, text=str(round(one_call.forecast_daily[0].temperature().get("max")-273.15)))
    canvas.itemconfig(max1, text=str(round(one_call.forecast_daily[1].temperature().get("max")-273.15)))
    canvas.itemconfig(max2, text=str(round(one_call.forecast_daily[2].temperature().get("max")-273.15)))
    canvas.itemconfig(max3, text=str(round(one_call.forecast_daily[3].temperature().get("max")-273.15)))
    canvas.itemconfig(max4, text=str(round(one_call.forecast_daily[4].temperature().get("max")-273.15)))
    canvas.itemconfig(max5, text=str(round(one_call.forecast_daily[5].temperature().get("max")-273.15)))
    canvas.itemconfig(max6, text=str(round(one_call.forecast_daily[6].temperature().get("max")-273.15)))
    arg.after(120000, lambda: update_forecast(arg, canvas,min_bas_now, max_bas_now, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, imgzero, imgone, imgtwo, imgthree, imgfour, imgfive, imgsix))
    

window = tkinter.Tk()

window.geometry("1023x600")
window.configure(bg = "#198BAF")

temperature=ImageTk.PhotoImage((Image.open('assets/frame0/temperature.png')).resize((80,78)))
co2=ImageTk.PhotoImage((Image.open('assets/frame0/carbon.png')).resize((67,53)))
pressure=ImageTk.PhotoImage((Image.open('assets/frame0/pressure.png')).resize((42,49)))
humidity=ImageTk.PhotoImage((Image.open('assets/frame0/humidity.png')).resize((110,93)))
hidx=ImageTk.PhotoImage((Image.open('assets/frame0/index.png')).resize((52,47)))
decibels=ImageTk.PhotoImage((Image.open('assets/frame0/decibels.png')).resize((93, 108)))

frame_lights =Frame(window, width=1024, height=600)
frame_lights.grid(row=0, column=0)
frame_weather =Frame(window, width=1024, height=600)
frame_weather.grid(row=0, column=0)
frame_map =Frame(window, width=1024, height=600)
frame_map.grid(row=0, column=0)
def load_page(frame,canvas):
    frame.tkraise()
    frame.pack_propagate(False)
    canvas.place(x=0,y=0)

canvas = Canvas(
    frame_weather,
    bg = "#198BAF",
    height = 600,
    width = 1023,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

##BEGIN NETATMO PART##

canvas.create_rectangle(
    0,480,1024,600,
    fill="#6EA9D3",
    outline="")
canvas.create_rectangle(
    0,
    480,
    167,
    600,
    fill="#6EA9D3",
    outline="")

canvas.create_rectangle(
    6,
    590,
    164,
    593,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    169,
    480,
    338,
    600,
    fill="#6EA9D3",
    outline="")

canvas.create_rectangle(
    171,
    590,
    335,
    593,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    340,
    480,
    508,
    600,
    fill="#6EA9D3",
    outline="")
canvas.create_rectangle(
    342,
    590,
    505,
    593,
    fill="#000000",
    outline="")
canvas.create_rectangle(
    510,
    480,
    679,
    600,
    fill="#6EA9D3",
    outline="")
canvas.create_rectangle(
    512,
    590,
    676,
    593,
    fill="#000000",
    outline="")
canvas.create_rectangle(
    680,
    480,
    850,
    600,
    fill="#6EA9D3",
    outline="")
canvas.create_rectangle(
    683,
    590,
    847,
    593,
    fill="#000000",
    outline="")
canvas.create_rectangle(
    851,
    480,
    1024,
    600,
    fill="#6EA9D3",
    outline="")
canvas.create_rectangle(
    854,
    590,
    1018,
    593,
    fill="#000000",
    outline="")

canvas.create_image(
    120,
    530,
    image=temperature
)
canvas.create_image(
    290,
    530,
    image=decibels
)
canvas.create_image(
    460,
    530,
    image=co2
)
canvas.create_image(
    630,
    530,
    image=humidity
)
canvas.create_image(
    815,
    530,
    image=pressure
)
canvas.create_image(
    975,
    530,
    image=hidx
)

canvas_temperature = canvas.create_text(
    30,
    500,
    anchor="nw",
    text=label_temperature,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold","bold")
)
canvas.create_text(
    30,
    530,
    anchor="nw",
    text="°C",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold","bold"))

canvas_noise = canvas.create_text(
    200,
    500,
    anchor="nw",
    text=label_noise,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold","bold")
)

canvas.create_text(
    200,
    530,
    anchor="nw",
    text="dB",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold","bold"))

canvas_co2 = canvas.create_text(
    370,
    500,
    anchor="nw",
    text=label_co2,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold","bold")
)

canvas.create_text(
    370,
    530,
    anchor="nw",
    text="ppm",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold","bold"))

canvas_humidity = canvas.create_text(
    540,
    500,
    anchor="nw",
    text=label_humidity,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold","bold")
    )
canvas.create_text(
    540,
    530,
    anchor="nw",
    text="%",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold","bold"))

canvas_pressure = canvas.create_text(
    705,
    500,
    anchor="nw",
    text=label_pressure,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold","bold")
)
canvas.create_text(
    710,
    530,
    anchor="nw",
    text="hPa",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold","bold"))


canvas_healthidx = canvas.create_text(
    880,
    500,
    anchor="nw",
    text=label_health_idx,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold","bold")
)
canvas.create_text(
    880,
    530,
    anchor="nw",
    text="unité",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold","bold"))

########### END NETATMO ############
canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    1023.9999389648438,
    48.0,
    fill="#FCA44C",
    outline="")
x = datetime.datetime.now()
show=x.strftime("%A") + " " + x.strftime("%d") + " " + x.strftime("%B") + " " + x.strftime("%H") + ":" + x.strftime("%M") + ":" + x.strftime("%S")
var = canvas.create_text(
    691.7333984375,
    0.0,
    anchor="nw",
    text=show,
    fill="#000000",
    font=("LibreFranklinRoman Regular", 21 * -1)
)

canvas.create_text(
    0.0,
    0.0,
    anchor="nw",
    text="D a s h b o a r d",
    fill="#000000",
    font=("LibreFranklinRoman Bold", 21 * -1,"bold","bold")
)



image7 = (Image.open('assets/frame0/left.png')).resize((92,128))
button_image_7 = ImageTk.PhotoImage(image7)
button_7 = Button(
    canvas,
    bg="#198BAF",
    image=button_image_7,
    highlightthickness = 0, bd = 0,
    command=lambda: load_page(frame_map,map_canvas),
)
button_7.place(
    x=13.0,
    y=213.0,
    width=92.0,
    height=128.0
)
image8 = (Image.open('assets/frame0/right.png')).resize((92,128))
button_image_8 = ImageTk.PhotoImage(image8)
button_8 = Button(
    canvas,
    bg="#198BAF",
    image=button_image_8,
    highlightthickness = 0, bd = 0,
    command=lambda: load_page(frame_lights,lights_canvas),
    relief="flat"
)
button_8.place(
    x=914.0,
    y=214.0,
    width=92.0,
    height=128.0
)
canvas.create_rectangle(
    45.0,
    468.0,
    971.0,
    470.0,
    fill="#000000",
    outline="")
canvas.create_text(
    249.0,
    57.0,
    anchor="nw",
    text="Weather",
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
)






temp_min = r['main']['temp_min']

min_bas_now = canvas.create_text(
    83.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[0].temperature().get("min")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

min1 = canvas.create_text(
    208.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[1].temperature().get("min")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

min2 = canvas.create_text(
    334.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[2].temperature().get("min")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

min3 = canvas.create_text(
    460.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[3].temperature().get("min")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

min4=canvas.create_text(
    585.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[4].temperature().get("min")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

min5=canvas.create_text(
    711.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[5].temperature().get("min")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

min6=canvas.create_text(
    837.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[6].temperature().get("min")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)
temp_max = r['main']['temp_max']
max_bas_now = canvas.create_text(
    172.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[0].temperature().get("max")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

max1=canvas.create_text(
    298.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[1].temperature().get("max")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

max2=canvas.create_text(
    423.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[2].temperature().get("max")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

max3=canvas.create_text(
    549.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[3].temperature().get("max")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

max4=canvas.create_text(
    675.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[4].temperature().get("max")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

max5=canvas.create_text(
    801.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[5].temperature().get("max")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

max6 =canvas.create_text(
    926.0,
    418.0,
    anchor="nw",
    text=str(round(one_call.forecast_daily[6].temperature().get("max")-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

threed_d = (datetime.date.today() + datetime.timedelta(days=3)).strftime("%d") + " " + (datetime.date.today() + datetime.timedelta(days=3)).strftime("%B")
fourd_d = (datetime.date.today() + datetime.timedelta(days=4)).strftime("%d") + " " + (datetime.date.today() + datetime.timedelta(days=4)).strftime("%B")
fifthd_d = (datetime.date.today() + datetime.timedelta(days=5)).strftime("%d") + " " + (datetime.date.today() + datetime.timedelta(days=5)).strftime("%B")
sixthd_d = (datetime.date.today() + datetime.timedelta(days=6)).strftime("%d") + " " + (datetime.date.today() + datetime.timedelta(days=6)).strftime("%B")
seventhd_d = (datetime.date.today() + datetime.timedelta(days=7)).strftime("%d") + " " + (datetime.date.today() + datetime.timedelta(days=7)).strftime("%B")
today = canvas.create_text(
    113.0,
    354.0,
    anchor="nw",
    text="Today",
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

tomorrow = canvas.create_text(
    225,
    354.0,
    anchor="nw",
    text="Tomorrow",
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

threed = canvas.create_text(
    360.0,
    354.0,
    anchor="nw",
    text=threed_d,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

fourd = canvas.create_text(
    484.0,
    354.0,
    anchor="nw",
    text=fourd_d,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

fifthd = canvas.create_text(
    610.0,
    354.0,
    anchor="nw",
    text=fifthd_d,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

sixthd = canvas.create_text(
    736.0,
    354.0,
    anchor="nw",
    text=sixthd_d,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)

seventhd = canvas.create_text(
    860.0,
    354.0,
    anchor="nw",
    text=seventhd_d,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 15 * -1,"bold")
)
id_icon = r['weather'][0]['icon']
image_image_7 = PhotoImage(
    file=relative_to_assets(id_icon + ".png"))
image_now = canvas.create_image(
    445.0,
    222.0,
    image=image_image_7
)

canvas.create_text(
    390.0,
    129.0,
    anchor="nw",
    text="Now in Le Mans :\n\n",
    fill="#FFFFFF",
    font=("Inter", 30 * -1)
)

first = canvas.create_text(
    550.0,
    179.0,
    anchor="nw",
    text=datetime.datetime.fromtimestamp(int(re["list"][0]["dt"])).strftime('%H:%M'),
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

second = canvas.create_text(
    550.0,
    222.0,
    anchor="nw",
    text=datetime.datetime.fromtimestamp(int(re["list"][1]["dt"])).strftime('%H:%M'),
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)

third = canvas.create_text(
    550.0,
    266.0,
    anchor="nw",
    text=datetime.datetime.fromtimestamp(int(re["list"][2]["dt"])).strftime('%H:%M'),
    fill="#FFFFFF",
    font=("Inter", 20 * -1)
)
temp = r['main']['temp']
temp_now = canvas.create_text(
    473.0,
    175.0,
    anchor="nw",
    text=str(round(temp-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman ExtraBold", 40 * -1,"bold")
)
image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    503.0,
    292.0,
    image=image_image_8
)
wind = r['wind']['speed']
wind_now = canvas.create_text(
    390.0,
    269.0,
    anchor="nw",
    text=str(int(wind)*3.6),
    fill="#000000",
    font=("LibreFranklinRoman ExtraBold", 40 * -1,"bold")
)

canvas.create_text(
    436.0,
    307.0,
    anchor="nw",
    text="km/h",
    fill="#000000",
    font=("LibreFranklinRoman ExtraBold", 15 * -1,"bold")
)

fimg = (Image.open('assets/frame0/' + re["list"][0]["weather"][0]["icon"]+'.png')).resize((85,85))
f_img = ImageTk.PhotoImage(fimg)
first_img = canvas.create_image(
    640.0,
    187.0,
    image=f_img
)

firsttemp = canvas.create_text(
    674.0,
    164.0,
    anchor="nw",
    text=str(round(re["list"][0]["main"]["temp"]-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman ExtraBold", 20 * -1,"bold")
)


simg = (Image.open('assets/frame0/' + re["list"][1]["weather"][0]["icon"]+'.png')).resize((85,85))
s_img = ImageTk.PhotoImage(simg)
second_img = canvas.create_image(
    640.0,
    232.0,
    image=s_img
)


secondtemp = canvas.create_text(
    674.0,
    209.0,
    anchor="nw",
    text=str(round(re["list"][1]["main"]["temp"]-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman ExtraBold", 20 * -1,"bold")
)

timg = (Image.open('assets/frame0/' + re["list"][2]["weather"][0]["icon"]+'.png')).resize((85,85))
t_img = ImageTk.PhotoImage(timg)
third_img = canvas.create_image(
    640.0,
    277.0,
    image=t_img
)

image = (Image.open('assets/frame0/' + one_call.forecast_daily[0].weather_icon_name + ".png")).resize((75,75))
image_image_today = ImageTk.PhotoImage(image)
imgzero = canvas.create_image(
    135.0,
    395.0,
    image=image_image_today
)

tmr = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[1].weather_icon_name + ".png")).resize((75,75)))
imgone = canvas.create_image(
    260.0,
    395.0,
    image=tmr
)

d3 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[2].weather_icon_name + ".png")).resize((75,75)))
imgtwo = canvas.create_image(
    385.0,
    395.0,
    image=d3
)

d4= ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[3].weather_icon_name + ".png")).resize((75,75)))
imgthree = canvas.create_image(
    510.0,
    395.0,
    image=d4
)

d5 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[4].weather_icon_name + ".png")).resize((75,75)))
imgfour = canvas.create_image(
    635.0,
    395.0,
    image=d5
)

d6 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[5].weather_icon_name + ".png")).resize((75,75)))
imgfive = canvas.create_image(
    760.0,
    395.0,
    image=d6
)

d7 = ImageTk.PhotoImage((Image.open('assets/frame0/' + one_call.forecast_daily[6].weather_icon_name + ".png")).resize((75,75)))
imgsix = canvas.create_image(
    885.0,
    395.0,
    image=d7
)



thirdtemp = canvas.create_text(
    674.0,
    254.0,
    anchor="nw",
    text=str(round(re["list"][2]["main"]["temp"]-273.15)),
    fill="#000000",
    font=("LibreFranklinRoman ExtraBold", 20 * -1,"bold")
)
canvas.pack()












lights_canvas = Canvas(
    frame_lights,
    bg = "#198BAF",
    height = 600,
    width = 1024,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)
##BEGIN NETATMO PART##

lights_canvas.create_rectangle(
    0,480,1024,600,
    fill="#6EA9D3",
    outline="")
lights_canvas.create_rectangle(
    0,
    480,
    167,
    600,
    fill="#6EA9D3",
    outline="")

lights_canvas.create_rectangle(
    6,
    590,
    164,
    593,
    fill="#000000",
    outline="")

lights_canvas.create_rectangle(
    169,
    480,
    338,
    600,
    fill="#6EA9D3",
    outline="")

lights_canvas.create_rectangle(
    171,
    590,
    335,
    593,
    fill="#000000",
    outline="")

lights_canvas.create_rectangle(
    340,
    480,
    508,
    600,
    fill="#6EA9D3",
    outline="")
lights_canvas.create_rectangle(
    342,
    590,
    505,
    593,
    fill="#000000",
    outline="")
lights_canvas.create_rectangle(
    510,
    480,
    679,
    600,
    fill="#6EA9D3",
    outline="")
lights_canvas.create_rectangle(
    512,
    590,
    676,
    593,
    fill="#000000",
    outline="")
lights_canvas.create_rectangle(
    680,
    480,
    850,
    600,
    fill="#6EA9D3",
    outline="")
lights_canvas.create_rectangle(
    683,
    590,
    847,
    593,
    fill="#000000",
    outline="")
lights_canvas.create_rectangle(
    851,
    480,
    1024,
    600,
    fill="#6EA9D3",
    outline="")
lights_canvas.create_rectangle(
    854,
    590,
    1018,
    593,
    fill="#000000",
    outline="")

lights_canvas.create_image(
    120,
    530,
    image=temperature
)
lights_canvas.create_image(
    290,
    530,
    image=decibels
)
lights_canvas.create_image(
    460,
    530,
    image=co2
)
lights_canvas.create_image(
    630,
    530,
    image=humidity
)
lights_canvas.create_image(
    815,
    530,
    image=pressure
)
lights_canvas.create_image(
    975,
    530,
    image=hidx
)

lights_canvas_temperature = lights_canvas.create_text(
    30,
    500,
    anchor="nw",
    text=label_temperature,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
)
lights_canvas.create_text(
    30,
    530,
    anchor="nw",
    text="°C",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold"))

lights_canvas_noise = lights_canvas.create_text(
    200,
    500,
    anchor="nw",
    text=label_noise,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
)

lights_canvas.create_text(
    200,
    530,
    anchor="nw",
    text="dB",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold"))

lights_canvas_co2 = lights_canvas.create_text(
    370,
    500,
    anchor="nw",
    text=label_co2,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
)

lights_canvas.create_text(
    370,
    530,
    anchor="nw",
    text="ppm",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold"))

lights_canvas_humidity = lights_canvas.create_text(
    540,
    500,
    anchor="nw",
    text=label_humidity,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
    )
lights_canvas.create_text(
    540,
    530,
    anchor="nw",
    text="%",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold"))

lights_canvas_pressure = lights_canvas.create_text(
    705,
    500,
    anchor="nw",
    text=label_pressure,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
)
lights_canvas.create_text(
    710,
    530,
    anchor="nw",
    text="hPa",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold"))


lights_canvas_healthidx = lights_canvas.create_text(
    880,
    500,
    anchor="nw",
    text=label_health_idx,
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
)
lights_canvas.create_text(
    880,
    530,
    anchor="nw",
    text="unité",
    fill = "#000000",
    font=("LibreFranklinRoman Bold", 25*-1,"bold"))

########### END NETATMO ############
lights_canvas.create_rectangle(
    0.0,
    0.0,
    1024.0,
    47.999996185302734,
    fill="#FCA44C",
    outline="")

var1 = lights_canvas.create_text(
    691.7333984375,
    0.0,
    anchor="nw",
    text=show,
    fill="#000000",
    font=("LibreFranklinRoman Regular", 21 * -1)
)

lights_canvas.create_text(
    0.0,
    0.0,
    anchor="nw",
    text="Dashboard",
    fill="#000000",
    font=("LibreFranklinRoman Bold", 21 * -1,"bold")
)

lights_canvas.create_text(
    352.0,
    60.0,
    anchor="nw",
    text="Lights",
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
)

lights_canvas.create_rectangle(
    249.0,
    105.0,
    764.0,
    457.0,
    fill="#1A8BAF",
    outline="")

bgc_living = "#808080"
if b.get_light('Hue ambiance pendant 1', 'on'):
    bgc_living = "#FFFF00"
lights_button_7 = Button(
    lights_canvas,
    borderwidth=0,
    text="Living Room",
    bg = bgc_living,
    command=lambda:switch(lights_button_7, 'Hue ambiance pendant 1'),
    highlightthickness=0,
    relief="flat"
)

lights_button_7.place(
    x=255.0,
    y=110.0,
    width=163.0,
    height=110.0)


bgc_dining = "#808080"
if b.get_light('Hue Fair Pendant 1', 'on'):
    bgc_dining = "#FFFF00"

lights_button_8 = Button(
    lights_canvas,
    borderwidth=0,
    text="Dining Room",
    bg = bgc_dining,
    highlightthickness=0,
    command=lambda:switch(lights_button_8, 'Hue Fair Pendant 1'),
    relief="flat"
)
lights_button_8.place(
    x=425.0,
    y=110.0,
    width=163.0,
    height=110.0
)
bgc_stairs = "#808080"
if b.get_light('Hue color lamp 1', 'on'):
    bgc_stairs = "#FFFF00"
lights_button_9 = Button(
    lights_canvas,
    borderwidth=0,
    text="Stairs",
    bg = bgc_stairs,
    highlightthickness=0,
    command=lambda: switch(lights_button_9, "Hue color lamp 1"),
    relief="flat"
)

lights_button_9.place(
    x=594.0,
    y=110.0,
    width=163.0,
    height=110.0
)
bgc_garden = "#808080"
if b.get_light('Hue color lamp 2', 'on'):
    bgc_garden = "#FFFF00"
lights_button_10 = Button(
    lights_canvas,
    borderwidth=0,
    text="Garden",
    bg = bgc_garden,
    highlightthickness=0,
    command=lambda: switch(lights_button_10,"Hue color lamp 2"),
    relief="flat"
)
lights_button_10.place(
    x=594.0,
    y=226.0,
    width=163.0,
    height=110.0
)

bgc_meross = "#808080"
if asyncio.run(get_meross()):
    bgc_meross = "#FFFF00"
lights_button_11 = Button(
    lights_canvas,
    borderwidth=0,
    text="Pierre lamp",
    bg = bgc_meross,
    highlightthickness=0,
    command=lambda: toggle_meross(lights_button_11),
    relief="flat"
)

lights_button_update_meross = Button(
    lights_canvas,
    borderwidth=0,
    text="Update Pierre's Lamp",
    bg = "#FFFFFF",
    highlightthickness=0,
    command=lambda:update_meross(window,lights_button_11),
    relief="flat"
)
lights_button_update_meross.place(
    x=775,
    y=360,
    width=125,
    height=100)
lights_button_11.place(
    x=594.0,
    y=341.0,
    width=163.0,
    height=110.0
)

lights_button_12 = Button(
    lights_canvas,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("lights_button_12 clicked"),
    relief="flat"
)
lights_button_12.place(
    x=425.0,
    y=226.0,
    width=163.0,
    height=110.0
)

lights_button_13 = Button(
    lights_canvas,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("lights_button_13 clicked"),
    relief="flat"
)
lights_button_13.place(
    x=425.0,
    y=341.0,
    width=163.0,
    height=110.0
)

lights_button_14 = Button(
    lights_canvas,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("lights_button_14 clicked"),
    relief="flat"
)
lights_button_14.place(
    x=255.0,
    y=226.0,
    width=163.0,
    height=110.0
)

lights_button_15 = Button(
    lights_canvas,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("lights_button_15 clicked"),
    relief="flat"
)
lights_button_15.place(
    x=255.0,
    y=341.0,
    width=163.0,
    height=110.0
)


lights_canvas.create_rectangle(
    45.0,
    468.0,
    971.0,
    470.0,
    fill="#000000",
    outline="")

lights_canvas.create_rectangle(
    985.0,
    279.0,
    989.0,
    279.0,
    fill="#FFFFFF",
    outline="")

lights_canvas.create_rectangle(
    35.0,
    279.0,
    39.0,
    279.0,
    fill="#FFFFFF",
    outline="")


lights_prev = (Image.open('assets/frame0/left.png')).resize((92,128))
lights_button_image_16 = ImageTk.PhotoImage(lights_prev)
lights_button_16 = Button(
    lights_canvas,
    image=lights_button_image_16,
    bg = "#198BAF",
    borderwidth=0,
    highlightthickness=0,
    bd=0,
    command=lambda: load_page(frame_weather,canvas),
)
lights_button_16.place(
    x=13.0,
    y=213.0,
    width=92.0,
    height=128.0
)

lights_next = (Image.open('assets/frame0/right.png')).resize((92,128))
lights_button_image_17 = ImageTk.PhotoImage(lights_next)
lights_button_17 = Button(
    lights_canvas,
    image=lights_button_image_17,
    borderwidth=0,
    bg = "#198BAF",
    bd=0,
    highlightthickness=0,
    command=lambda: load_page(frame_map,map_canvas),
    relief="flat"
)
lights_button_17.place(
    x=914.0,
    y=217.0,
    width=92.0,
    height=128.0
)





map_canvas = Canvas(
    frame_map,
    bg = "#198BAF",
    height = 600,
    width = 1023,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

map_normal = ImageTk.PhotoImage(Image.open('assets/frame0/map.png'))
osm_map = map_canvas.create_image(
    512,
    344,
    image=map_normal
)

top_left = map_canvas.create_image(
    256,
    216,
    image=None
)

top_center = map_canvas.create_image(
    512,
    216,
    image=None
)

top_right = map_canvas.create_image(
    768,
    216,
    image=None
)

bottom_left = map_canvas.create_image(
    256,
    472,
    image=None
)

bottom_center = map_canvas.create_image(
    512,
    472,
    image=None
)
bottom_right = map_canvas.create_image(
    768,
    472,
    image=None
)
map_canvas.create_rectangle(
    0.0,
    0.0,
    1023.9999389648438,
    48.0,
    fill="#FCA44C",
    outline="")

var2= map_canvas.create_text(
    691.7333984375,
    0.0,
    anchor="nw",
    text=show,
    fill="#000000",
    font=("LibreFranklinRoman Regular", 21 * -1)
)

map_canvas.create_text(
    0.0,
    0.0,
    anchor="nw",
    text="Dashboard",
    fill="#000000",
    font=("LibreFranklinRoman Bold", 21 * -1,"bold")
)

map_canvas.create_rectangle(
    985.0,
    279.0,
    989.0,
    279.0,
    fill="#FFFFFF",
    outline="")

map_canvas.create_rectangle(
    35.0,
    278.99999237060547,
    39.0,
    279.0,
    fill="#FFFFFF",
    outline="")



map_button_image_1 = ImageTk.PhotoImage((Image.open('assets/frame0/left.png')).resize((92,128)))
map_button_1 = Button(
    map_canvas,
    image=map_button_image_1,
    bg="#198BAF",
    borderwidth=0,
    highlightthickness=0,bd=0,
    command=lambda: load_page(frame_lights,lights_canvas),
    relief="flat"
)
map_button_1.place(
    x=13.0,
    y=213.0,
    width=92.0,
    height=128.0
)

map_button_image_2 = ImageTk.PhotoImage((Image.open('assets/frame0/right.png')).resize((92,128)))
map_button_2 = Button(
    map_canvas,
    image=map_button_image_2,
    borderwidth=0,
    bd=0,
    bg="#198BAF",
    highlightthickness=0,
    command=lambda: load_page(frame_weather,canvas),
    relief="flat"
)
map_button_2.place(
    x=914.0,
    y=214.0,
    width=92.0,
    height=128.0
)

map_canvas.create_text(
    249.0,
    57.0,
    anchor="nw",
    text="Weather Map",
    fill="#000000",
    font=("LibreFranklinRoman Bold", 25 * -1,"bold")
)

map_button_3 = Button(
    map_canvas,
    text="Clouds",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: set_layer(map_canvas,"clouds_new",top_left,top_center,top_right,bottom_left,bottom_center,bottom_right),
    relief="flat"
)
map_button_3.place(
    x=13.0,
    y=412.0,
    width=92.0,
    height=70.0
)

map_button_4 = Button(
    map_canvas,
    text="Temperature",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: set_layer(map_canvas,"temp_new",top_left,top_center,top_right,bottom_left,bottom_center,bottom_right),
    relief="flat"
)
map_button_4.place(
    x=13.0,
    y=514.0,
    width=92.0,
    height=70.0
)

map_button_5 = Button(
    map_canvas,
    text="Wind Speed",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: set_layer(map_canvas,"wind_new",top_left,top_center,top_right,bottom_left,bottom_center,bottom_right),
    relief="flat"
)
map_button_5.place(
    x=914.0,
    y=412.0,
    width=92.0,
    height=70.0
)

map_button_6 = Button(
    map_canvas,
    text="Precipitation",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: set_layer(map_canvas,"precipitation_new",top_left,top_center,top_right,bottom_left,bottom_center,bottom_right),
    relief="flat"
)
map_button_6.place(
    x=914.0,
    y=514.0,
    width=92.0,
    height=70.0
)









load_page(frame_weather,canvas)
window.resizable(False, False)
window.after(600000, lambda:update_meross(window,lights_button_11))
window.after(3000, lambda: update_light_hue(window,lights_canvas,lights_button_7,lights_button_8,lights_button_9, lights_button_10))
window.after(120000, lambda: update_forecast(window, canvas,min_bas_now, max_bas_now, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, imgzero, imgone, imgtwo, imgthree, imgfour, imgfive, imgsix))
window.after(60000, lambda: update_weather_up(window,canvas,first_img,second_img, third_img,first,second,third,firsttemp,secondtemp,thirdtemp))
window.after(60000, lambda: update_weather_now(window, canvas, image_now, temp_now,wind_now))
window.after(10000, lambda: update_date(window,canvas,threed, fourd, fifthd, sixthd, seventhd))
window.after(500, lambda: update_time(window, canvas, var))
window.after(500, lambda: update_time(window, lights_canvas, var1))
window.after(500, lambda: update_time(window, map_canvas, var2))
window.after(60000, lambda: refresh_netatmo(window,canvas,lights_canvas, canvas_temperature, canvas_co2, canvas_noise, canvas_healthidx, canvas_pressure, canvas_humidity,
                    lights_canvas_co2, lights_canvas_temperature, lights_canvas_noise, lights_canvas_healthidx,
                    lights_canvas_pressure, lights_canvas_humidity))
window.mainloop()
